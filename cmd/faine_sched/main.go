package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/calendar/v3"
	"google.golang.org/api/option"
)

func get_document(url string) goquery.Selection {
	resp, err := http.Get(url)
	if err != nil {
		log.Fatalf("Unable to retrieve schedule page web: %v", err)
	}

	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		log.Fatalf("status code error: %d %s", resp.StatusCode, resp.Status)
	}

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		log.Fatalf("Unable to parse a doc: %v", err)
	}
	return *doc.Find(".q_tabs").First()
}

func get_show_list(doc goquery.Selection, date_map map[string]string) []FShow {
	result := make([]FShow, 0)
	for id, date := range date_map {
		doc.Find(id).Each(func(i int, s *goquery.Selection) {
			s.Find(".sched-column").Each(func(i int, s *goquery.Selection) {
				scene := strings.Trim(s.Find(".sched-column-header").Text(), " \t\n")
				s.Find(".sched-event").Each(func(i int, s *goquery.Selection) {
					url, _ := s.Attr("href")
					name := s.Find(".sched-event-title").Text()
					times := s.Find(".sched-event-subtitle").Text()
					result = append(result, FShow{scene: scene, url: url, name: name, times: times, date: date})
				})
			})
		})
	}
	return result
}

// Retrieve a token, saves the token, then returns the generated client.
func getClient(config *oauth2.Config) *http.Client {
	// The file token.json stores the user's access and refresh tokens, and is
	// created automatically when the authorization flow completes for the first
	// time.
	tokFile := "../../token.json"
	tok, err := tokenFromFile(tokFile)
	if err != nil {
		tok = getTokenFromWeb(config)
		saveToken(tokFile, tok)
	}
	return config.Client(context.Background(), tok)
}

// Retrieves a token from a local file.
func tokenFromFile(file string) (*oauth2.Token, error) {
	f, err := os.Open(file)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	tok := &oauth2.Token{}
	err = json.NewDecoder(f).Decode(tok)
	return tok, err
}

// Request a token from the web, then returns the retrieved token.
func getTokenFromWeb(config *oauth2.Config) *oauth2.Token {
	authURL := config.AuthCodeURL("state-token", oauth2.AccessTypeOffline)
	fmt.Printf("Go to the following link in your browser then type the "+
		"authorization code: \n%v\n", authURL)

	var authCode string
	if _, err := fmt.Scan(&authCode); err != nil {
		log.Fatalf("Unable to read authorization code: %v", err)
	}

	tok, err := config.Exchange(context.TODO(), authCode)
	if err != nil {
		log.Fatalf("Unable to retrieve token from web: %v", err)
	}
	return tok
}

// Saves a token to a file path.
func saveToken(path string, token *oauth2.Token) {
	fmt.Printf("Saving credential file to: %s\n", path)
	f, err := os.OpenFile(path, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0600)
	if err != nil {
		log.Fatalf("Unable to cache oauth token: %v", err)
	}
	defer f.Close()
	json.NewEncoder(f).Encode(token)
}

func get_or_create_calendar(svc calendar.Service) *calendar.Calendar {
	list, err := svc.CalendarList.List().Do()
	if err != nil {
		log.Fatalf("Unable to retrieve Calendar list: %v", err)
	}
	cal_id := ""
	for i := 0; i < len(list.Items); i++ {
		cal := list.Items[i]
		if cal.Summary == "FaineMisto_auto" {
			cal_id = cal.Id
			break
		}
	}
	if cal_id == "" {
		cal := calendar.Calendar{Summary: "FaineMisto_auto", TimeZone: "Europe/Kiev", Description: "Autogenerated calendar. Source: https://fainemisto.com.ua/timetable/"}
		res, err := svc.Calendars.Insert(&cal).Do()
		if err != nil {
			log.Fatalf("Unable to insert a new calendar: %v", err)
		}
		return res
	} else {
		cal, err := svc.Calendars.Get(cal_id).Do()
		if err != nil {
			log.Fatalf("Unable to get a calendar: %v", err)
		}
		return cal
	}
}

func cleanup_calendar(svc calendar.Service, cal calendar.Calendar) {
	events, err := svc.Events.List(cal.Id).Do()
	if err != nil {
		log.Fatalf("Unable to retrieve Event list: %v", err)
	}
	for i := 0; i < len(events.Items); i++ {
		svc.Events.Delete(cal.Id, events.Items[i].Id).Do()
		time.Sleep(100 * time.Millisecond)
	}

}

func populate_calendar(svc calendar.Service, cal calendar.Calendar, show_list []Show) {
	for i := 0; i < len(show_list); i++ {
		show := show_list[i]
		event := calendar.Event{
			Summary:  show.name,
			Location: show.scene,
			ColorId:  show.scene_num,
			Start: &calendar.EventDateTime{
				DateTime: time.Unix(show.start_date, 0).Format(time.RFC3339),
			},
			End: &calendar.EventDateTime{
				DateTime: time.Unix(show.end_date, 0).Format(time.RFC3339),
			},
			Description: show.url,
		}
		_, err := svc.Events.Insert(cal.Id, &event).Do()
		if err != nil {
			log.Fatalf("Unable to create an event: %v", err)
		}
		time.Sleep(100 * time.Millisecond)
	}
}

func do_calendar_stuff(show_list []Show) {
	ctx := context.Background()
	// Authorization credentials for a desktop application. To learn how to create credentials for a desktop application, refer to Create credentials.
	// https://developers.google.com/workspace/guides/create-credentials
	b, err := ioutil.ReadFile("../../credentials.json")
	if err != nil {
		log.Fatalf("Unable to read client secret file: %v", err)
	}
	// If modifying these scopes, delete your previously saved token.json.
	config, err := google.ConfigFromJSON(b, calendar.CalendarScope)
	if err != nil {
		log.Fatalf("Unable to parse client secret file to config: %v", err)
	}
	client := getClient(config)
	srv, err := calendar.NewService(ctx, option.WithHTTPClient(client))
	if err != nil {
		log.Fatalf("Unable to retrieve Calendar client: %v", err)
	}
	cal := get_or_create_calendar(*srv)
	cleanup_calendar(*srv, *cal)
	populate_calendar(*srv, *cal, show_list)
}

func get_date_map(doc goquery.Selection) map[string]string {
	dates_html_list := doc.Find(".tabs-nav").First().Children()
	dates_map := make(map[string]string)

	dates_html_list.Each(func(i int, s *goquery.Selection) {
		attr, _ := s.Children().Attr("href")
		dates_map[attr] = s.Text()
	})
	return dates_map
}

func convert_fshow(fshow_list []FShow) []Show {
	result := make([]Show, 0)
	year := time.Now().Year()
	scenes := make([]string, 0)
	for _, fshow := range fshow_list {
		date_split := strings.Split(fshow.date, ".")
		day, _ := strconv.Atoi(date_split[0])
		month, _ := strconv.Atoi(date_split[1])
		// ex. 13:00 - 13:40
		time_split := strings.Split(fshow.times, "-")
		start_hour, _ := strconv.Atoi(strings.Split(strings.Trim(time_split[0], " "), ":")[0])
		start_minute, _ := strconv.Atoi(strings.Split(strings.Trim(time_split[0], " "), ":")[1])
		end_hour, _ := strconv.Atoi(strings.Split(strings.Trim(time_split[1], " "), ":")[0])
		end_minute, _ := strconv.Atoi(strings.Split(strings.Trim(time_split[1], " "), ":")[1])
		tz, _ := time.LoadLocation("Europe/Brussels")
		start_date := time.Date(year, time.Month(month), day, start_hour, start_minute, 0, 0, tz)
		if start_hour < 9 {
			start_date = start_date.AddDate(0, 0, 1)
		}
		end_date := time.Date(year, time.Month(month), day, end_hour, end_minute, 0, 0, tz)
		if end_hour < 9 {
			end_date = end_date.AddDate(0, 0, 1)
		}
		scene_num := len(scenes)
		for i, scene := range scenes {
			if scene == fshow.scene {
				scene_num = i
				break
			}
		}
		if scene_num == len(scenes) {
			scenes = append(scenes, fshow.scene)
		}
		result = append(result, Show{fshow.scene, strconv.Itoa(scene_num), fshow.name, start_date.Unix(), end_date.Unix(), fshow.url})
	}
	return result
}

func main() {
	doc := get_document("https://fainemisto.com.ua/timetable/")
	date_map := get_date_map(doc)
	fshow_list := get_show_list(doc, date_map)
	show_list := convert_fshow(fshow_list)
	do_calendar_stuff(show_list)
}

type Show struct {
	scene      string
	scene_num  string
	name       string
	start_date int64
	end_date   int64
	url        string
}

type FShow struct {
	date  string
	times string
	scene string
	name  string
	url   string
}
